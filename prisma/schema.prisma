// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(uuid())
  email        String @unique @db.VarChar(32) // 이메일
  nickname     String @unique @db.VarChar(20) // 서비스 내 표시할 별명
  name         String @db.VarChar(100) // 유저 성명
  iter         Int    @default(10000) // Hash iteration, 매 인증성공시마다 1씩 감소
  salt         String @db.Char(32) // Random string, length: 32
  pwdEncrypted String @db.Char(104) // Encrypted password, length: 104

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  investments Investment[]
  comparisons Comparison[]
  watchList   Watch[]
  UserSession UserSession[]
}

model UserSession {
  user             User   @relation(fields: [userId], references: [id])
  userId           String
  iter             Int    @default(1000) // Hash iteration. 성공시마다 1씩 감소.
  // Session 을 검사할때마다 성공시 iter 를 하나씩 줄입니다. hash function 을 1000번 돌린 값으로 sessionEncrypted 와 맞춰보고 999번 돌린 값으로 받고 서버단에서 1번 더 hash 를 돌려서 값이 같은지 판단합니다. 성공하면 이번엔 client 단에서 998번 hash 를 돌린 값을 받고 서버단에서 2번 더 hash 를 돌린 뒤 sessionEncrypted 와 맞춰봅니다. 계속해서 iter 수를 줄여갑니다.
  // 이렇게 하면 Network 중단에서 데이터를 가로챈 뒤 Session 을 훔쳐서 몰래 로그인 하는걸 방지할 수 있습니다.
  // Hash 는 정방향으로는 순쉽간에 결과가 나오지만, 이 Hash 의 역함수를 구하는건 굉장히 어렵습니다. Rainbow table 로 모든 암호에 대해 마지막 sessionEncrypted 가 뭐가 나오는지 저장해놓고 역산할수는 있지만, 이 마저도 각 유저별로 랜덤한 다른 salt 를 첨가하는 것으로 막을 수 있습니다.
  // 이 암호는 양자컴퓨터로도 못 푸는 것으로 알고 있습니다.
  // 정확히 어떻게 동작하는건지 궁금하신 분은 이강수님 (kipacti@gmail.com) 에게 문의해 주세요.
  ip               String @db.VarChar(45) // IPv6 port 포함 max 값
  sessionSalt      String @db.Char(32)
  sessionEncrypted String @db.Char(104)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, createdAt])
  @@index([userId, createdAt(sort: Desc)])
}

model SocialLogin {
  nickname   String?  @db.VarChar(20)
  authorizor String?  @db.VarChar(10)
  state      String   @db.Char(32)
  ip         String   @db.VarChar(45)
  sW         Int
  sH         Int
  createdAt  DateTime @default(now())

  @@id([state, ip])
}

model Company {
  // TODO 가상 투자 금액 총계를 직접 저장할 것인가, 매번 계산할 것인가?
  // 당장은 FE 단에서 계산하고 있음.
  id            String  @id @default(uuid())
  name          String  @unique
  description   String
  category      String // 회사 카테고리. 입력단에서 검증해야함.
  accumulInvest BigInt // NOTE 누적 투자 금액(실제)
  revenue       BigInt // NOTE 매출액
  employees     Int // NOTE 고용 인원수
  logo          String? // NOTE 로고 이미지

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  investments Investment[]
  comparisons Comparison[]
  watcherList Watch[]
}

model Watch {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  companyId String?
}

model Comparison {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  companyId String?
}

model Investment {
  id       String @id @default(uuid())
  name     String
  amount   BigInt
  comment  String
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String? // NOTE 투자자
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  companyId String? // NOTE 투자대상 기업

  @@index([userId, createdAt(sort: Desc)])
}
